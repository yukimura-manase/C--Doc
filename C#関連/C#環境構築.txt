
< C# VScode 開発環境構築 & ファイル実行 >

1. .NET Coreのインストール & セットアップ

2. VScode内のC#開発環境セットアップ

上記2つが必要！

----------------------------------------------------------------------------------------------------------------------------------------

< 1. .NET Coreのインストール & セットアップ >

1. NET Core SDK のダウンロード


2. .NET Core SDK のインストール

3. .NET Core SDK のバージョン確認(インストール確認)

    #  .NET Core SDK のバージョン確認(インストール確認)
        dotnet --version

        6.0.200


4. .NET Core の動作確認

    最後に、コードを生成して、実行するまでを確認します。

    dotnet new コマンドを使うことで、
    .NET Core での様々なプロジェクトを自動生成することができます。
    
    今回は、dotnet new console -o HelloWorldApp
    
    を実行して、Hello World のコンソールアプリ（既定で C#）を生成してみます。

    dotnet new console -o HelloWorldApp

    テンプレートに従い、アプリが生成され、dotnet restore を自動実行し、必要なパッケージを取得までしてくれますので何もしなくてもアプリを開発、実行する環境が整います。

    cd HelloWorldApp
    
    で移動して、vim Program.cs などで内容を確認してみましょう。

    最後に、dotnet run を実行します。
    
    dotnet run
    
    Hello World!
    と表示されたら正常動作していることになります（実行速度は結構遅めです）。



Mac で .NET Core 2.0 開発実行環境を整える
https://blog.evangelism.jp/entry/dotnet-core-on-mac

----------------------------------------------------------------------------------------------------------------------------------------

< 2. VScode内のC#開発環境セットアップ >

< 事前条件 >

以下のソフトウェアは導入されている前提で記事を書いています。
導入していない方は以下のリンクより導入しておいてください。

.NET Core 3.x or later


< 導入プラグイン >

この記事では required となっているプラグインのみを使って紹介していきます。

optional となっているプラグインで気になるものがあったら、導入して使てみてください。

1. C# (required)

    インテリセンス や シンタックスハイライト、定義へ移動 などの開発に必要な一通りの機能を提供してくれるプラグインです。


2. VS Sharper for C# (required)

    classファイル や interfaceファイル などを追加したときに namespace や class interface などの情報を自動で入力してくれるプラグインです。
    C# Extensions も似たような機能を有しており、こちらよりも有名ですが、この部分の機能に関してはこちらの方が少しだけ優秀です。


3. Auto-Using for C# (optional)

    まだ using で指定されていない class を利用したときに自動で using を解決してくれるプラグインです。
    必要な方は導入してください。

4. C# XML Documentation Comments (optional)

    XMLドキュメントコメント の作成を補助してくれるプラグインです。
    必要な方は導入してください。

5. .NET Core Test Explorer (optional)

    テストプロジェクトの実行・管理をいい感じにできるようになるプラグインです。


6. Bookmarks (optional)

    Visual Studio にもある Bookmark 機能を実現できるようになるプラグインです。


7. Todo Tree (optional)

    Visual Studio にもある Todo 機能を実現できるようになるプラグインです。


8. NuGet Package Manager (optional)

    NuGetパッケージ の検索・インストールができるようになるプラグインです。


9. NuGet Reverse Package Search (optional)

    class名などから NuGetパッケージ を逆引き検索できるようになるプラグインです。


10. NuGet Gallery (optional)

    Visual Studio についてる NuGetパッケージ管理 のアレと同じ機能を提供するプラグインです。


11. C# IL Viewer (optional)

    生成される IL を表示してくれるプラグインです。
    メタプログラミングをする方や自分が書いたコードの IL が見たい人は導入してください。


< 開発手順 >

1. プロジェクト作成

    まずは dotnet コマンドを利用して新規プロジェクトを作成します。

    # プロジェクトを作成するコマンド
    dotnet new console -o "SampleConsole"
    code SampleConsole

    実行すると VSCode が起動して、右下あたりに以下のようなメッセージが表示されると思いますので Yes を選択します。

    そうすることによって F5 で Build & Run させることができるようになります。


2.プログラムの実行

    Build & Run
    
    F5 キーを押下することで Build & Run が実行されます。

    すると以下のように "Hello, World!" が表示されると思います。


3. デバッグ実行

    また、特定の行で F9 を押下することで Break point を設定・解除することも可能です。
    
    今回は Console.WriteLine("Hello, World!") の行に設定してみます。

    設定が正常にできると、以下のように行番号の左側に赤点が付加されます。


VSCodeでC#開発をする方法
https://zenn.dev/midoliy/articles/9e3cff958ff89ba151de

----------------------------------------------------------------------------------------------------------------------------------------

VSCodeでC#開発環境整えちゃう（グッバイVisual Studio）
https://ascii.jp/elem/000/004/038/4038170/



----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------

